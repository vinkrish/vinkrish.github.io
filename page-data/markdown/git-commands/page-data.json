{"componentChunkName":"component---src-templates-blog-post-js","path":"/markdown/git-commands/","webpackCompilationHash":"9a078b1071657605a048","result":{"data":{"site":{"siteMetadata":{"title":"TunedReality","author":"Vinay"}},"markdownRemark":{"id":"14720b3a-8789-551d-9c2f-ceece347ab8f","excerpt":"Everything you need to know about Git","html":"<p>Everything you need to know about Git</p>\n<p><div id=\"gist90832882\" class=\"gist\">\n    <div class=\"gist-file\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-git-commands-md\" class=\"file my-2\">\n      <div id=\"file-git-commands-md-readme\" class=\"Box-body readme blob js-code-block-container p-5 p-xl-6 \">\n    <article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><p><code>$ git init</code><br>\nwill initialize git repository in current directory</p>\n<p><code>$ git status</code><br>\nto see current state of project</p>\n<p><code>$ git add file.txt</code><br>\nto start tracking changes made to file.txt...added to staging area</p>\n<p><code>$ git commit -m \"just added the file to repository\"</code><br>\nmoving file from staging area to repository</p>\n<p><code>$ git add -all</code><br>\n(or)\n<code>$ git add .</code><br>\nadds all new or modified files</p>\n<p><code>$ git add *.txt</code><br>\nadding files of same type in current directory</p>\n<p><code>$ git add docs/*.txt</code><br>\nadds all txt files in docs directory</p>\n<p><code>$ git add docs/</code><br>\nadds all files in docs directory</p>\n<p><code>$ git add \"*.txt\"</code><br>\nadds all txt files in the whole project</p>\n<p><code>$ git add -u</code><br>\nstage tracked files, including deleting the previously tracked files</p>\n<p><code>$ git add -u .</code><br>\nstages tracked files in current path (including sub folders)</p>\n<p><code>$ git add -u :/</code><br>\nstages whole working tree</p>\n<p><code>$ git log</code><br>\nto browse what files are changed</p>\n<p><code>$ git log -1</code><br>\nto check last commit</p>\n<p><code>$ git log --graph --decorate --oneline</code></p>\n<p><code>$ git remote -v</code><br>\nto know about remote repos</p>\n<p><code>$ git remote add origin https://github.com/vinkrish/repo-name.git</code><br>\nto push local repo to GitHub server...takes remote name and repository URL</p>\n<p><code>$ git remote rm upstream (or) origin</code><br>\nto remove upstream/origin</p>\n<p>Fork the repo first<br>\n<code>$ git remote rename origin upstream</code><br>\n<code>$ git remote add origin URL_of_forked_repo</code><br>\nwhile working on forked repo change origin to point to forked repo</p>\n<p><code>$ git remote add &lt;name&gt; &lt;address&gt;</code><br>\nto add new remotes</p>\n<p><code>$ git remote rm &lt;name&gt;</code><br>\nto remove remote</p>\n<p><code>$ git remote show origin</code></p>\n<p><code>$ git remote prune origin</code><br>\nremoves all stale branches</p>\n<p><code>$ git push -u &lt;name&gt; &lt;branch&gt;</code><br>\nto push to remotes,  is usually master</p>\n<p><code>$ git push -u origin master</code><br>\nname of our remote is origin and default local branch name is master.<br>\n-u tells Git to remember the parameters and next time don't have to specify origin and branch</p>\n<p><code>$ git pull origin master</code><br>\npull down any new changes</p>\n<p>To pull new branch from upstream<br>\n<code>$ git fetch upstream</code><br>\n<code>$ git pull upstream/branch_name</code><br>\neg: git pull upstream master</p>\n<p><code>$ git branch -d branch_name</code><br>\nto delete branch</p>\n<p><code>$ git diff</code><br>\nshows unstaged differences since last commit</p>\n<p><code>$ git diff HEAD</code><br>\ndiff of our most recent commit, HEAD refers to last commit.</p>\n<p><code>$ git diff --staged</code><br>\n<code>$ git diff --cached</code><br>\nchanges that are staged, to show diff after adding files.</p>\n<p><code>$ git diff HEAD HEAD~2</code><br>\n<code>$ git diff branch_name master</code><br>\nchanges in branch compared to master</p>\n<p><code>$ git revert commit_hash</code><br>\ncreates a new commit that undoes the changes from a previous commit (adds new history to the project)</p>\n<p>Reset moves the current branch and optionally copies data from repository to other areas<br>\n<code>$ git reset HEAD directory/file.txt</code><br>\n<code>$ git reset directory/file.txt</code><br>\nunstage files..removing</p>\n<p><code>$ git reset --soft HEAD^</code><br>\nreset into staging, move to commit before HEAD</p>\n<p><code>$ git reset --hard HEAD^</code><br>\nundo last commit and all changes</p>\n<p><code>$ git reset --hard commit_ref =&gt; copies data into Working Area &amp; Index</code><br>\n<code>$ git reset --mixed commit_name =&gt; copies data into Index, default behavior</code><br>\n<code>$ git reset --soft commit =&gt; doesn't touch any</code></p>\n<p><code>$ git commit -a -m \"add changes from all tracked files\"</code><br>\nIf you want to skip the staging area and not add new files</p>\n<p><code>$ git add forgottenFile.txt</code><br>\n<code>$ git commit --amend -m \"modify last commit with this new commit message\"</code><br>\nadd to the last commit</p>\n<p><code>$ git checkout -- file.txt</code><br>\nchanges back to how they were at the last commit for file.txt</p>\n<p>Branching Out: when you are working on a bug or feature, u can create copy(aka branch) of code and can make separate commits to.<br>\nwhen u r done u can merge this branch back into their main master branch.</p>\n<p><code>$ git branch clean_up</code><br>\nbranch is called clean_up</p>\n<p><code>$ git branch</code><br>\nlists local branches: master and new clean_up branch</p>\n<p><code>$ git branch --all</code><br>\nlists are remote branches as well</p>\n<p><code>$ git checkout clean_up</code><br>\nwill start using new branch</p>\n<p><code>$ git rm '*.txt'</code><br>\nin clean_up branch we can remove file or use wildcard</p>\n<p><code>$ git commit -m \"Remove all the files\"</code><br>\nafter removing we need to commit changes</p>\n<p><code>$ git branch -d branch_name</code><br>\ndelete local branch</p>\n<p><code>$ git branch -D branch_name</code><br>\ndelete local branch forcefully (irrespective of its merged status)</p>\n<p><code>$ git checkout master</code><br>\nafter finishing with branch, switch back to master..copy or merge from clean_up branch to master branch</p>\n<p><code>$ git checkout master</code><br>\n<code>$ git merge clean_up</code></p>\n<p><code>$ git branch -d clean_up</code><br>\ndelete clean_up branch after merging changes to master</p>\n<p><code>$ git checkout commit</code><br>\ninstead of checkout branch, you can directly checkout commit which will result your HEAD in detached state</p>\n<p><code>$ git push</code><br>\nto push files from now on</p>\n<p><code>$ git clone url</code><br>\nto fetch files from github</p>\n<p><code>$ git checkout -b new_branch</code><br>\ncreates and checks out branch</p>\n<p><code>$ git pull origin new_branch</code></p>\n<p><code>$ git checkout master</code><br>\n<code>$ git merge new_branch</code><br>\n<code>:wq</code><br>\nhit Enter to write(save) &amp; quit</p>\n<p>When there is conflict fix it manually, then add and commit without commit message.<br>\n<code>$ git add conflicted_file</code><br>\n<code>$ git commit</code><br>\n<code>$ git merge new_branch</code></p>\n<p>After branch is merged to master<br>\n<code>$ git checkout new_branch</code><br>\n<code>$ git merge master</code><br>\nthis is fast-forward</p>\n<p><code>$ git commit --amend</code><br>\nto update last commit without creating new commit, git does that for you</p>\n<p><code>mv old_name new_name</code><br>\n<code>$ git add new_name</code><br>\n<code>$ git add old_name</code><br>\nThis removes old_name file from index and it does that by renaming coz content of both files are same.</p>\n<p><code>$ git mv new_name old_name</code><br>\nbuilt in way of renaming</p>\n<p>Please move or remove them before you can merge:<br>\n<code>$ git clean -d -f</code></p>\n<p>Unrelated history issues<br>\n<code>$ git pull origin master --allow-unrelated-histories</code><br>\n<code>$ git push origin master</code></p>\n<p>cherry-pick: Apply the changes introduced by some existing commits<br>\n<code>$ git cherry-pick commit_hash</code></p>\n<p>If new commit message is needed:<br>\n<code>$ git cherry-pick --edit commit_hash</code></p>\n<p>Tagging:<br>\n<code>$ git tag</code><br>\nv0.0.1\nv0.0.2<br>\n<code>$ git checkout v0.0.1</code><br>\n<code>$ git tag -a v0.0.3 -m \"version 0.0.3\"</code><br>\n<code>$ git push --tags</code></p>\n<p><code>$ git fetch</code><br>\n<code>$ git rebase</code><br>\n<code>$ git add file</code><br>\n<code>$ git rebase --continue</code></p>\n<p><code>$ git rebase --interactive</code><br>\n<code>$ git rebase -i</code></p>\n<p><code>$ git log --oneline --graph</code><br>\n<code>$ git log --until=1.minute.ago</code><br>\n<code>$ git log --since=1.day.ago</code><br>\n<code>$ git log --since=1.hour.ago</code><br>\n<code>$ git log --since=1.month.ago --until=2.weeks.ago</code><br>\n<code>$ git log --since=2000-01-01 --until=2012-12-21</code></p>\n<p><code>$ git reflog HEAD</code><br>\n<code>$ git reflog refs/heads/master</code></p>\n<p><code>$ git show commit_log</code><br>\n<code>$ git show HEAD</code><br>\n<code>$ git show HEAD^</code><br>\n<code>$ git show HEAD^^</code><br>\n<code>$ git show HEAD~2</code><br>\n<code>$ git show HEAD~2^2 =&gt; 2nd parent of 2nd commit before HEAD</code></p>\n<p><code>$ git blame file =&gt; which commit changed what</code><br>\n<code>$ git blame index.html --date short</code></p>\n<p>.git/info/exclude<br>\nexperiments/<br>\nwill exclude this folder from git</p>\n<p>.gitignore<br>\nlogs/*.log</p>\n<p>To remove file from repo<br>\n<code>$ git rm file.txt</code><br>\n-f force removal<br>\n--cached only removes from Index but keeps it in Working Area</p>\n<p><code>$ git rm --cached file.txt</code><br>\nuntracking files but not deleted from file system</p>\n<p><code>git ls-files --deleted -z | xargs -0 git rm</code></p>\n<p><code>git config -l</code></p>\n<p><code>$ git config credential.helper store</code><br>\n<code>$ git push https://github.com/repo.git</code></p>\n<p>Username for '<a href=\"https://github.com\">https://github.com</a>': <br>\nPassword for '<a href=\"https://USERNAME@github.com\">https://USERNAME@github.com</a>': </p>\n<pre><code>git config --global user.name \"Vinay Krishna\"\ngit config --global user.email \"vinaykrishna1989@gmail.com\"\ngit config --global color.ui true\n</code></pre>\n<pre><code>git config --list\ngit config --list --global\ngit config --list --system\ngit config --list --local\n</code></pre>\n<pre><code>git config --edit --global\ngit config --edit --system\ngit config --edit --local\n</code></pre>\n<p><code>heroku create</code><br>\n<code>git push heroku master</code></p>\n<p>git reset should be used before push</p>\n<p><code>$ git help log</code><br>\n<code>$ git log --patch</code><br>\n<code>$ git log --grep context_text --oneline</code><br>\n<code>$ git help grep</code><br>\n<code>$ git log -3 --oneline</code></p>\n<p>Commands that move branches:<br>\ncommit, merge, rebase, pull, reset<br>\ncheckout changes repo coz it moves head pointer &amp; copies data into Working Area and the Index</p>\n<p>For large file:<br>\n<code>brew install git-lfs</code><br>\n<code>git lfs install</code><br>\n<code>git lfs track \"*.csv\"</code><br>\n<code>git add .gitattributes</code></p>\n<pre><code>git add file.csv\ngit commit -m \"Add data file\"\ngit push origin master\n</code></pre>\n</article>\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/vinkrish/8745cefb565591fe504f8cd97e081942/raw/1fa0433e77ef1b40a46b70d790ebd1755fc0a588/git-commands.md\" style=\"float:right\">view raw</a>\n        <a href=\"https://gist.github.com/vinkrish/8745cefb565591fe504f8cd97e081942#file-git-commands-md\">git-commands.md</a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div></p>","frontmatter":{"title":"Git Handy Commands","date":"January 28, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/markdown/git-commands/","previous":{"fields":{"slug":"/automate/automate/"},"frontmatter":{"title":"Automate - Remember DRY!"}},"next":{"fields":{"slug":"/markdown/spoj_frustration/"},"frontmatter":{"title":"SPOJ Frustration - Time Limit Exceeded"}}}}}