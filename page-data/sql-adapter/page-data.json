{"componentChunkName":"component---src-templates-blog-post-js","path":"/sql-adapter/","result":{"data":{"site":{"siteMetadata":{"title":"Home","author":"Vinay"}},"markdownRemark":{"id":"f87b268c-a312-51dc-a470-299c44d35580","excerpt":"Turning SQL WHERE Clauses into React QueryBuilder Rules — Introducing querybuilder-sql-adapter In modern UI platforms that allow users to build complex filters…","html":"<h3>Turning SQL WHERE Clauses into React QueryBuilder Rules — Introducing querybuilder-sql-adapter</h3>\n<p>In modern UI platforms that allow users to build complex filters or queries, it’s common to use visual query builders — drag-and-drop UIs that abstract away the raw SQL or backend logic. One popular and powerful library for this is react-querybuilder. But what happens when you already have SQL WHERE clauses and want to visualize or edit them?</p>\n<p>That’s exactly the gap this project aims to fill.</p>\n<h2>Why This Was Needed</h2>\n<p>In many internal admin tools or no-code platforms, users often write or are provided with SQL WHERE clauses. Developers want to:\nParse an existing SQL expression\nVisualize it in a frontend UI\nAllow editing using a builder like react-querybuilder</p>\n<p>However, react-querybuilder doesn’t natively support converting SQL strings into its RuleGroupType format — and while it provides utilities to generate SQL from rules, the reverse transformation (SQL → rules) was missing.</p>\n<p>This project solves that.</p>\n<h2>What This Project Does</h2>\n<p>The querybuilder-sql-adapter:</p>\n<ul>\n<li>Parses SQL WHERE clauses using node-sql-parser</li>\n<li>Transforms the AST into RuleGroupType format used by react-querybuilder</li>\n<li>Supports nested expressions, CASE WHEN, COALESCE, IS NULL, BETWEEN, math expressions, and more</li>\n<li>Outputs rules that can be round-tripped back to SQL</li>\n<li>Supports advanced expressions using a raw: true structure for complex right-hand values</li>\n</ul>\n<h2>Example</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { parseWhereClauseToRuleGroup } from '../src/sqlWhereToRuleGroup';\nimport { formatQuery } from 'react-querybuilder';\n\nconst fieldSources = [\n  { name: 'field1' },\n  { name: 'field2' },\n  { name: 'status' },\n  { name: 'field3' },\n  { name: 'discount' },\n  { name: 'name' },\n  { name: 'price' },\n  { name: 'category' },\n  { name: 'field4' },\n  { name: 'score' },\n  { name: 'discounted_price' },\n  { name: 'field5' },\n];\n\nconst whereClause = `\n(\n  (field1 + field2 * 2 &lt; 100 OR status IN ('active', 'pending'))\n  AND field3 IS NOT NULL\n  AND discount BETWEEN 10 AND 50\n  AND name LIKE 'A%'\n  AND COALESCE(price, CASE WHEN category = 'electronics' THEN 99 ELSE 49 END) = 99\n  AND field4 IS NULL\n  AND score > COALESCE(discounted_price, CASE WHEN field5 = 'gold' THEN 200 ELSE 100 END)\n)\n`;\n\nconst ruleGroup = parseWhereClauseToRuleGroup(whereClause, fieldSources);\n\nconsole.log('Parsed RuleGroup:', JSON.stringify(ruleGroup, null, 2));\n\n{\n  \"combinator\": \"and\",\n  \"rules\": [\n    {\n      \"combinator\": \"and\",\n      \"rules\": [\n        {\n          \"combinator\": \"and\",\n          \"rules\": [\n            {\n              \"combinator\": \"and\",\n              \"rules\": [\n                {\n                  \"combinator\": \"and\",\n                  \"rules\": [\n                    {\n                      \"combinator\": \"and\",\n                      \"rules\": [\n                        {\n                          \"combinator\": \"or\",\n                          \"rules\": [\n                            {\n                              \"field\": \"(field1 + (field2 * 2))\",\n                              \"operator\": \"&lt;\",\n                              \"value\": 100\n                            },\n                            {\n                              \"field\": \"status\",\n                              \"operator\": \"in\",\n                              \"value\": [\n                                \"active\",\n                                \"pending\"\n                              ]\n                            }\n                          ]\n                        },\n                        {\n                          \"field\": \"field3\",\n                          \"operator\": \"notNull\",\n                          \"value\": null\n                        }\n                      ]\n                    },\n                    {\n                      \"field\": \"discount\",\n                      \"operator\": \"between\",\n                      \"value\": [\n                        10,\n                        50\n                      ]\n                    }\n                  ]\n                },\n                {\n                  \"field\": \"name\",\n                  \"operator\": \"like\",\n                  \"value\": \"A%\"\n                }\n              ]\n            },\n            {\n              \"field\": \"COALESCE(price, CASE WHEN (category = 'electronics') THEN 99 ELSE 49 END)\",\n              \"operator\": \"=\",\n              \"value\": 99\n            }\n          ]\n        },\n        {\n          \"field\": \"field4\",\n          \"operator\": \"null\",\n          \"value\": null\n        }\n      ]\n    },\n    {\n      \"field\": \"score\",\n      \"operator\": \">\",\n      \"value\": \"COALESCE(discounted_price, CASE WHEN (field5 = 'gold') THEN 200 ELSE 100 END)\"\n    }\n  ]\n}</code></pre></div>\n<h2>Internals</h2>\n<p>The utility walks the parsed SQL AST and recursively transforms expressions into RuleGroupType rules. It handles:</p>\n<ul>\n<li>Logical operators: AND, OR</li>\n<li>Math: field1 + field2 * 3</li>\n<li>Functions: COALESCE, IFNULL, etc.</li>\n<li>Null checks: IS NULL, IS NOT NULL</li>\n<li>Conditional logic: CASE WHEN … THEN … END</li>\n<li>Literal handling: strings, numbers, booleans</li>\n</ul>\n<h2>Try It Out</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> querybuilder-sql-adapter</code></pre></div>\n<p>Check out the repository on GitHub: <a href=\"https://github.com/vinkrish/querybuilder-sql-adapter\">querybuilder-sql-adapter</a></p>","frontmatter":{"title":"querybuilder-sql-adapter","date":"July 12, 2025"}}},"pageContext":{"slug":"/sql-adapter/","previous":{"fields":{"slug":"/aot/"},"frontmatter":{"title":"AOT - Creating current publicly available information in English"}},"next":null}},"staticQueryHashes":["3128451518","3297874162"]}