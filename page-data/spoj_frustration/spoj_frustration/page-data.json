{"componentChunkName":"component---src-templates-blog-post-js","path":"/spoj_frustration/spoj_frustration/","webpackCompilationHash":"9a078b1071657605a048","result":{"data":{"site":{"siteMetadata":{"title":"TunedReality","author":"Vinay"}},"markdownRemark":{"id":"9cee8f61-435b-5fe0-8fdb-97a9493d7134","excerpt":"I was playing around with python as it was new to me and thought of solving some problems on SPOJ. while solving Next Palindrome problem, I spent lot of timeâ€¦","html":"<p>I was playing around with python as it was new to me and thought of solving some problems on SPOJ.</p>\n<p>while solving <em>Next Palindrome</em> problem, I spent lot of time trying to figure out solutin on my own; after successful testing the code I submitted the solution only to find out it was exceeding the time limit.</p>\n<p>Not having the test case they run at your disposal makes it so hard to figure out the shortcomings of your solution.</p>\n<p>Here is the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Palindrome_Generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tself<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num\n\t\tself<span class=\"token punctuation\">.</span>num_len <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_next_palindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>check_all_9s<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>for_all_9s<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\tcurrent_num <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>make_int<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span>\n\t\t\timmediate_palindrome <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_immediate_palindrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> current_num <span class=\"token operator\">&lt;</span> immediate_palindrome<span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">return</span> immediate_palindrome\n\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\t\tself<span class=\"token punctuation\">.</span>update_successor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>num_len<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>get_immediate_palindrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>get_immediate_palindrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">get_immediate_palindrome</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t_num <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>num_len <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\t_num<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>num_len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>make_int<span class=\"token punctuation\">(</span>_num<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">update_successor</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tcarry <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t\thalf_num_len <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>num_len<span class=\"token operator\">//</span><span class=\"token number\">2</span>\n\t\t<span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>num_len <span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n\t\t\todd_even <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t\ti <span class=\"token operator\">=</span> half_num_len<span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\t\t\tj <span class=\"token operator\">=</span> half_num_len\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\todd_even <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t\t\ti <span class=\"token operator\">=</span> half_num_len\n\t\t\tj <span class=\"token operator\">=</span> half_num_len\n\n\t\t<span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>half_num_len<span class=\"token operator\">+</span>odd_even<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tself<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> carry <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>carry_successor<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> carry<span class=\"token punctuation\">)</span>\n\t\t\ti <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n\t\t\tj <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\t\t\t<span class=\"token keyword\">if</span> carry <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token keyword\">break</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">carry_successor</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">,</span> carry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> prev<span class=\"token operator\">==</span><span class=\"token number\">9</span> <span class=\"token keyword\">and</span> <span class=\"token builtin\">next</span><span class=\"token operator\">==</span><span class=\"token number\">9</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token keyword\">elif</span> prev <span class=\"token operator\">&lt;=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> prev<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">check_all_9s</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">9</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">for_all_9s</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\tpalin <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>num_len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>make_int<span class=\"token punctuation\">(</span>palin<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">def</span> <span class=\"token function\">make_int</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t_str <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>_num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _num <span class=\"token keyword\">in</span> num<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ncount <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Enter the count of number you wanna test :'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nnumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    numbers<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Enter the number :'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">:</span>\n\tpalindrome <span class=\"token operator\">=</span> Palindrome_Generator<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>palindrome<span class=\"token punctuation\">.</span>get_next_palindrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Time complexity is <strong>O(n)</strong> as there are no nested for loops, I found solution with different mathematical approach but still in the end all I wanted was my solution to be accepted.</p>\n<p>Any improvements are welcome.</p>","frontmatter":{"title":"SPOJ Frustration - Time Limit Exceeded","date":"January 29, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/spoj_frustration/spoj_frustration/","previous":{"fields":{"slug":"/git-commands/"},"frontmatter":{"title":"Git Handy Commands"}},"next":{"fields":{"slug":"/subtitle-text-extraction/subtitle-text-extraction/"},"frontmatter":{"title":"Extract Text from Subtitle"}}}}}