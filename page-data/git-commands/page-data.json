{"componentChunkName":"component---src-templates-blog-post-js","path":"/git-commands/","result":{"data":{"site":{"siteMetadata":{"title":"Home","author":"Vinay"}},"markdownRemark":{"id":"46222762-2255-59e0-bdf9-9acb6d6520a0","excerpt":"Everything you need to know about Git","html":"<p>Everything you need to know about Git</p>\n<p><div id=\"gist90832882\" class=\"gist\">\n    <div class=\"gist-file\" translate=\"no\" data-color-mode=\"light\" data-light-theme=\"light\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container\">\n  <div id=\"file-git-commands-md\" class=\"file my-2\">\n      <div id=\"file-git-commands-md-readme\" class=\"Box-body readme blob p-5 p-xl-6 \"\n    style=\"overflow: auto\" tabindex=\"0\" role=\"region\"\n    aria-label=\"git-commands.md content, created by vinkrish on 06:41PM on July 18, 2018.\"\n  >\n    <article class=\"markdown-body entry-content container-lg\" itemprop=\"text\"><div class=\"markdown-heading\" dir=\"auto\"><h2 class=\"heading-element\" dir=\"auto\">Setting up a repo</h2><a id=\"user-content-setting-up-a-repo\" class=\"anchor\" aria-label=\"Permalink: Setting up a repo\" href=\"#setting-up-a-repo\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><code>$ git init</code><br>\nwill initialize git repository in current directory<br>\n(or)<br>\n<code>$ git clone ssh://vinay@example.com/path/to/my-project.git</code><br>\n<code>$ cd my-project</code></p>\n<p dir=\"auto\"><code>$ git remote -v</code><br>\nto know about remote repos</p>\n<p dir=\"auto\"><code>$ git remote add origin https://github.com/vinkrish/repo-name.git</code><br>\nto push local repo to GitHub server...takes remote name and repository URL</p>\n<p dir=\"auto\"><code>$ git remote rm upstream (or) origin</code><br>\nto remove upstream/origin</p>\n<p dir=\"auto\"><code>$ git remote show origin</code></p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Checkout Remote Branch</h3><a id=\"user-content-checkout-remote-branch\" class=\"anchor\" aria-label=\"Permalink: Checkout Remote Branch\" href=\"#checkout-remote-branch\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><code>$ git branch</code><br>\nlists local branches: master and new clean_up branch</p>\n<p dir=\"auto\"><code>$ git branch --all</code><br>\nlists are remote branches as well</p>\n<p dir=\"auto\"><code>$ git branch branchName</code><br>\nnew branch created</p>\n<p dir=\"auto\"><code>$ git checkout branchName</code><br>\nwill start using new branch branchName</p>\n<p dir=\"auto\"><code>$ git checkout -b branchName</code><br>\nCreate new branch locally and switch to new branch</p>\n<p dir=\"auto\"><code>$ git fetch</code><br>\nWill load all the remote branches locally so now you can simply access any remote branch via it’s name.<br>\n<code>$ git checkout branchName</code></p>\n<p dir=\"auto\">If you have local branch that’s also called branchName?<br>\n<code>$ git fetch origin</code><br>\n<code>$ git checkout –-track origin/branchName</code></p>\n<p dir=\"auto\">If you have multiple remotes? specify the remote name<br>\n<code>$ git checkout -b branchName upstream/branchName</code></p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Making changes</h3><a id=\"user-content-making-changes\" class=\"anchor\" aria-label=\"Permalink: Making changes\" href=\"#making-changes\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><code>$ git status</code><br>\nto see current state of project</p>\n<p dir=\"auto\"><code>$ git add file.txt</code><br>\nto start tracking changes made to file.txt...added to staging area</p>\n<p dir=\"auto\"><code>$ git commit -m \"just added the file to repository\"</code><br>\nmoving file from staging area to repository</p>\n<p dir=\"auto\"><code>$ git add -all</code><br>\n(or)\n<code>$ git add .</code><br>\nadds all new or modified files</p>\n<p dir=\"auto\"><code>$ git add *.txt</code><br>\nadding files of same type in current directory</p>\n<p dir=\"auto\"><code>$ git add docs/*.txt</code><br>\nadds all txt files in docs directory</p>\n<p dir=\"auto\"><code>$ git add docs/</code><br>\nadds all files in docs directory</p>\n<p dir=\"auto\"><code>$ git add \"*.txt\"</code><br>\nadds all txt files in the whole project</p>\n<p dir=\"auto\"><code>$ git add -u</code><br>\nstage tracked files, including deleting the previously tracked files</p>\n<p dir=\"auto\"><code>$ git add -u .</code><br>\nstages tracked files in current path (including sub folders)</p>\n<p dir=\"auto\"><code>$ git add -u :/</code><br>\nstages whole working tree</p>\n<p dir=\"auto\"><code>$ git log</code><br>\nto browse what files are changed</p>\n<p dir=\"auto\"><code>$ git log -1</code><br>\nto check last commit</p>\n<p dir=\"auto\"><code>$ git log --graph --decorate --oneline</code></p>\n<p dir=\"auto\"><code>$ git branch -m &lt;new_name&gt;</code><br>\nto rename local branch</p>\n<p dir=\"auto\">Fork the repo first<br>\n<code>$ git remote rename origin upstream</code><br>\n<code>$ git remote add origin URL_of_forked_repo</code><br>\nwhile working on forked repo change origin to point to forked repo</p>\n<p dir=\"auto\"><code>$ git remote prune origin</code><br>\nremoves all stale branches</p>\n<p dir=\"auto\"><code>$ git push -u &lt;name&gt; &lt;branch&gt;</code><br>\nto push to remotes,  is usually master</p>\n<p dir=\"auto\"><code>$ git push -u origin master</code><br>\nname of our remote is origin and default local branch name is master.<br>\n-u tells Git to remember the parameters and next time don't have to specify origin and branch</p>\n<p dir=\"auto\"><code>$ git pull origin master</code><br>\npull down any new changes</p>\n<p dir=\"auto\"><code>$ git diff</code><br>\nshows unstaged differences since last commit</p>\n<p dir=\"auto\"><code>$ git diff HEAD</code><br>\ndiff of our most recent commit, HEAD refers to last commit.</p>\n<p dir=\"auto\"><code>$ git diff --staged</code><br>\n<code>$ git diff --cached</code><br>\nchanges that are staged, to show diff after adding files.</p>\n<p dir=\"auto\"><code>$ git diff HEAD HEAD~2</code><br>\n<code>$ git diff branch_name master</code><br>\nchanges in branch compared to master</p>\n<p dir=\"auto\"><code>$ git revert commit_hash</code><br>\ncreates a new commit that undoes the changes from a previous commit (adds new history to the project)</p>\n<p dir=\"auto\">Reset moves the current branch and optionally copies data from repository to other areas<br>\n<code>$ git reset HEAD directory/file.txt</code><br>\n<code>$ git reset directory/file.txt</code><br>\nunstage files..removing</p>\n<p dir=\"auto\"><code>$ git reset --soft HEAD^</code><br>\nreset into staging, move to commit before HEAD</p>\n<p dir=\"auto\"><code>$ git reset --hard HEAD^</code><br>\n<code>$ git reset --hard &lt;previous commit hash&gt;</code><br>\nundo last commit and all changes</p>\n<p dir=\"auto\"><code>$ git push -f origin main(or master)</code><br>\nTo make changes to remote</p>\n<p dir=\"auto\"><code>$ git reset --hard commit_ref =&gt; copies data into Working Area &amp; Index</code><br>\n<code>$ git reset --mixed commit_name =&gt; copies data into Index, default behavior</code><br>\n<code>$ git reset --soft commit =&gt; doesn't touch any</code></p>\n<p dir=\"auto\"><code>$ git commit -a -m \"add changes from all tracked files\"</code><br>\nIf you want to skip the staging area and not add new files</p>\n<p dir=\"auto\"><code>$ git add forgottenFile.txt</code><br>\n<code>$ git commit --amend</code><br>\nto update last commit without creating new commit, git does that for you\n<code>$ git commit --amend -m \"modify last commit with this new commit message\"</code><br>\nadd to the last commit</p>\n<p dir=\"auto\"><code>$ git checkout -- file.txt</code><br>\nchanges back to how they were at the last commit for file.txt</p>\n<p dir=\"auto\"><code>$ git rm '*.txt'</code><br>\nin clean_up branch we can remove file or use wildcard</p>\n<p dir=\"auto\"><code>$ git commit -m \"Remove all the files\"</code><br>\nafter removing we need to commit changes</p>\n<p dir=\"auto\"><code>$ git branch -d branch_name</code><br>\ndelete local branch</p>\n<p dir=\"auto\"><code>$ git branch -D branch_name</code><br>\ndelete local branch forcefully (irrespective of its merged status)</p>\n<p dir=\"auto\"><code>$ git push -d origin &lt;branch-name&gt;</code><br>\n<code>$ git push origin --delete &lt;branch_name&gt;</code>\ndelete remote branch</p>\n<p dir=\"auto\"><code>$ git checkout master</code><br>\nafter finishing with branch, switch back to master..copy or merge from clean_up branch to master branch</p>\n<p dir=\"auto\"><code>$ git checkout master</code><br>\n<code>$ git merge clean_up</code><br>\n<code>:wq</code><br>\nhit Enter to write(save) &amp; quit</p>\n<p dir=\"auto\"><code>$ git branch -d clean_up</code><br>\ndelete clean_up branch after merging changes to master</p>\n<p dir=\"auto\"><code>$ git checkout commit</code><br>\ninstead of checkout branch, you can directly checkout commit which will result your HEAD in detached state</p>\n<p dir=\"auto\"><code>$ git push</code><br>\nto push files from now on</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Different ways to pull remote branch to local</h3><a id=\"user-content-different-ways-to-pull-remote-branch-to-local\" class=\"anchor\" aria-label=\"Permalink: Different ways to pull remote branch to local\" href=\"#different-ways-to-pull-remote-branch-to-local\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><code>$ git pull origin branch_name</code><br>\nThis is the default option where the changes from the remote branch are merged into local branch.</p>\n<p dir=\"auto\"><code>$ git pull --rebase origin branch_name</code><br>\nThis option replays your local commits on top of the commits from the remote branch, creating a linear history.</p>\n<p dir=\"auto\"><code>$ git pull --ff-only origin branch_name</code><br>\nThis option will only pull the changes if your local branch can be fast-forwarded to the remote branch. It fails if there are divergent changes.</p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Merge master branch into your branch</h3><a id=\"user-content-merge-master-branch-into-your-branch\" class=\"anchor\" aria-label=\"Permalink: Merge master branch into your branch\" href=\"#merge-master-branch-into-your-branch\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><code>$ git merge master</code> or <code>$ git merge origin/master</code><br>\nthis is fast-forward.</p>\n<p dir=\"auto\">When there is conflict fix it manually, then add and commit without commit message.<br>\n<code>$ git add conflicted_file</code><br>\n<code>$ git commit</code></p>\n<p dir=\"auto\">Abort merging:<br>\n<code>$ git merge --abort</code></p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Merge local branch to local master branch</h3><a id=\"user-content-merge-local-branch-to-local-master-branch\" class=\"anchor\" aria-label=\"Permalink: Merge local branch to local master branch\" href=\"#merge-local-branch-to-local-master-branch\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><code>$ git rebase master</code> or <code>git rebase origin/master</code></p>\n<p dir=\"auto\">When there are conflicts.<br>\n<code>$ git add &lt;resolved-files&gt;</code><br>\n<code>$ git rebase --continue</code></p>\n<p dir=\"auto\">Abort rebasing:<br>\n<code>$ git rebase --abort</code></p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Clean-up commit history</h3><a id=\"user-content-clean-up-commit-history\" class=\"anchor\" aria-label=\"Permalink: Clean-up commit history\" href=\"#clean-up-commit-history\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><code>$ git rebase -i &lt;base-commit&gt;</code><br>\n<code>$ git rebase -i HEAD~3</code></p>\n<pre><code>pick 2h33d4 First commit message\npick 1ha9se Second commit message\npick 3ada9s Third commit message\n\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n</code></pre>\n<p dir=\"auto\"><code>mv old_name new_name</code><br>\n<code>$ git add new_name</code><br>\n<code>$ git add old_name</code><br>\nThis removes old_name file from index and it does that by renaming coz content of both files are same.</p>\n<p dir=\"auto\"><code>$ git mv new_name old_name</code><br>\nbuilt in way of renaming</p>\n<p dir=\"auto\">Please move or remove them before you can merge:<br>\n<code>$ git clean -d -f</code></p>\n<p dir=\"auto\">Unrelated history issues<br>\n<code>$ git pull origin master --allow-unrelated-histories</code><br>\n<code>$ git push origin master</code></p>\n<p dir=\"auto\">cherry-pick: Apply the changes introduced by some existing commits<br>\n<code>$ git cherry-pick commit_hash</code></p>\n<p dir=\"auto\">If new commit message is needed:<br>\n<code>$ git cherry-pick --edit commit_hash</code></p>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\">Hotfix Release</h3><a id=\"user-content-hotfix-release\" class=\"anchor\" aria-label=\"Permalink: Hotfix Release\" href=\"#hotfix-release\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><code>$ git tag</code><br>\n<code>$ git checkout tags/release-tag-name hotfix-branch-name</code><br>\n<code>$ git cherry-pick &lt;commit-hash&gt;</code></p>\n<p dir=\"auto\">Resolve any conflicts<br>\n<code>$ git add &lt;file1&gt; &lt;file2&gt;</code><br>\n<code>$ git cherry-pick --continue</code><br>\n<code>$ git push origin hotfix-branch-name</code></p>\n<div class=\"markdown-heading\" dir=\"auto\"><h4 class=\"heading-element\" dir=\"auto\">Tagging:</h4><a id=\"user-content-tagging\" class=\"anchor\" aria-label=\"Permalink: Tagging:\" href=\"#tagging\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<p dir=\"auto\"><code>$ git tag</code><br>\nv0.0.1\nv0.0.2</p>\n<p dir=\"auto\"><code>$ git tag v1.0.1</code><br>\n<code>$ git push origin v1.0.1</code></p>\n<p dir=\"auto\"><code>$ git checkout v0.0.1</code><br>\n<code>$ git tag -a v0.0.3 -m \"version 0.0.3\"</code><br>\n<code>$ git push --tags</code></p>\n<p dir=\"auto\"><code>$ git log --oneline --graph</code><br>\n<code>$ git log --until=1.minute.ago</code><br>\n<code>$ git log --since=1.day.ago</code><br>\n<code>$ git log --since=1.hour.ago</code><br>\n<code>$ git log --since=1.month.ago --until=2.weeks.ago</code><br>\n<code>$ git log --since=2000-01-01 --until=2012-12-21</code></p>\n<p dir=\"auto\"><code>$ git reflog HEAD</code><br>\n<code>$ git reflog refs/heads/master</code></p>\n<p dir=\"auto\"><code>$ git show commit_log</code><br>\n<code>$ git show HEAD</code><br>\n<code>$ git show HEAD^</code><br>\n<code>$ git show HEAD^^</code><br>\n<code>$ git show HEAD~2</code><br>\n<code>$ git show HEAD~2^2 =&gt; 2nd parent of 2nd commit before HEAD</code></p>\n<p dir=\"auto\"><code>$ git blame file =&gt; which commit changed what</code><br>\n<code>$ git blame index.html --date short</code></p>\n<p dir=\"auto\">.git/info/exclude<br>\nexperiments/<br>\nwill exclude this folder from git</p>\n<p dir=\"auto\">.gitignore<br>\nlogs/*.log</p>\n<p dir=\"auto\">Delete all branchs locally, can replace feature with whatever you want:</p>\n<pre><code>git branch -d `git branch | grep -E 'bugfix.*'`\ngit branch -d `git branch | grep -E 'feature.*'`\n</code></pre>\n<p dir=\"auto\">To delete a regex match of branches remotely:</p>\n<pre><code>git push origin --delete `git branch -r | grep -Eo 'bugfix.*'`\ngit push origin --delete `git branch -r | grep -Eo 'feature.*'`\n</code></pre>\n<p dir=\"auto\">To remove file from repo<br>\n<code>$ git rm file.txt</code><br>\n-f force removal<br>\n--cached only removes from Index but keeps it in Working Area</p>\n<p dir=\"auto\"><code>$ git rm --cached file.txt</code><br>\nuntracking files but not deleted from file system</p>\n<p dir=\"auto\"><code>git ls-files --deleted -z | xargs -0 git rm</code></p>\n<p dir=\"auto\"><code>rm -rf .git</code><br>\nRemove git repo completely without side effects</p>\n<p dir=\"auto\"><code>git config -l</code></p>\n<p dir=\"auto\"><code>$ git config credential.helper store</code><br>\n<code>$ git push https://github.com/repo.git</code></p>\n<p dir=\"auto\">Username for '<a href=\"https://github.com\">https://github.com</a>': <br>\nPassword for '<a href=\"https://USERNAME@github.com\">https://USERNAME@github.com</a>': </p>\n<pre><code>git config --global user.name \"Vinay Krishna\"\ngit config --global user.email \"vinaykrishna1989@gmail.com\"\ngit config --global color.ui true\ngit config --global pull.rebase true (If you prefer to always use rebase)\n</code></pre>\n<pre><code>git config --list\ngit config --list --global\ngit config --list --system\ngit config --list --local\n</code></pre>\n<pre><code>git config --edit --global\ngit config --edit --system\ngit config --edit --local\n</code></pre>\n<p dir=\"auto\"><code>heroku create</code><br>\n<code>git push heroku master</code></p>\n<p dir=\"auto\">git reset should be used before push</p>\n<p dir=\"auto\"><code>$ git help log</code><br>\n<code>$ git log --patch</code><br>\n<code>$ git log --grep context_text --oneline</code><br>\n<code>$ git help grep</code><br>\n<code>$ git log -3 --oneline</code></p>\n<p dir=\"auto\">Commands that move branches:<br>\ncommit, merge, rebase, pull, reset<br>\ncheckout changes repo coz it moves head pointer &amp; copies data into Working Area and the Index</p>\n<p dir=\"auto\">For large file:<br>\n<code>brew install git-lfs</code><br>\n<code>git lfs install</code><br>\n<code>git lfs track \"*.csv\"</code><br>\n<code>git add .gitattributes</code></p>\n<pre><code>git add file.csv\ngit commit -m \"Add data file\"\ngit push origin master\n</code></pre>\n<div class=\"markdown-heading\" dir=\"auto\"><h3 class=\"heading-element\" dir=\"auto\"><code>git help</code></h3><a id=\"user-content-git-help\" class=\"anchor\" aria-label=\"Permalink: git help\" href=\"#git-help\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a></div>\n<pre><code>usage: git [-v | --version] [-h | --help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]\n           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]\n           [--super-prefix=&lt;path&gt;] [--config-env=&lt;name&gt;=&lt;envvar&gt;]\n           &lt;command&gt; [&lt;args&gt;]\n\nThese are common Git commands used in various situations:\n\nstart a working area (see also: git help tutorial)\n   clone     Clone a repository into a new directory\n   init      Create an empty Git repository or reinitialize an existing one\n\nwork on the current change (see also: git help everyday)\n   add       Add file contents to the index\n   mv        Move or rename a file, a directory, or a symlink\n   restore   Restore working tree files\n   rm        Remove files from the working tree and from the index\n\nexamine the history and state (see also: git help revisions)\n   bisect    Use binary search to find the commit that introduced a bug\n   diff      Show changes between commits, commit and working tree, etc\n   grep      Print lines matching a pattern\n   log       Show commit logs\n   show      Show various types of objects\n   status    Show the working tree status\n\ngrow, mark and tweak your common history\n   branch    List, create, or delete branches\n   commit    Record changes to the repository\n   merge     Join two or more development histories together\n   rebase    Reapply commits on top of another base tip\n   reset     Reset current HEAD to the specified state\n   switch    Switch branches\n   tag       Create, list, delete or verify a tag object signed with GPG\n\ncollaborate (see also: git help workflows)\n   fetch     Download objects and refs from another repository\n   pull      Fetch from and integrate with another repository or a local branch\n   push      Update remote refs along with associated objects\n\n'git help -a' and 'git help -g' list available subcommands and some\nconcept guides. See 'git help &lt;command&gt;' or 'git help &lt;concept&gt;'\nto read about a specific subcommand or concept.\n</code></pre>\n</article>\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/vinkrish/8745cefb565591fe504f8cd97e081942/raw/b23a62723006d4f2cc3c09b1470b85afe4837b38/git-commands.md\" style=\"float:right\" class=\"Link--inTextBlock\">view raw</a>\n        <a href=\"https://gist.github.com/vinkrish/8745cefb565591fe504f8cd97e081942#file-git-commands-md\" class=\"Link--inTextBlock\">\n          git-commands.md\n        </a>\n        hosted with &#10084; by <a class=\"Link--inTextBlock\" href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div></p>","frontmatter":{"title":"Git Handy Commands","date":"January 28, 2019"}}},"pageContext":{"slug":"/git-commands/","previous":{"fields":{"slug":"/automate/"},"frontmatter":{"title":"Automate - Remember DRY!"}},"next":{"fields":{"slug":"/subtitle-text-extraction/"},"frontmatter":{"title":"Extract Text from Subtitle"}}}},"staticQueryHashes":["3128451518","3297874162"]}