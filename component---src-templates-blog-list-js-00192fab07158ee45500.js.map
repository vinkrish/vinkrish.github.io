{"version":3,"sources":["webpack:///./src/templates/blog-list.js"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","location","keywords","map","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","excerpt","display","flexWrap","justifyContent","alignItems","listStyle","padding","rel","Array","from","length","_","i","margin","textDecoration","color","background","React","Component","pageQuery"],"mappings":"sOAQMA,E,gLACJC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACFG,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBC,MAH9B,EAI2BR,KAAKC,MAAMQ,YAArCC,EAJD,EAICA,YAAaC,EAJd,EAIcA,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,MAAQA,EAAc,GAAGK,WAC5DC,GAAYN,EAAc,GAAGK,WAEnC,OACE,kBAAC,IAAD,CAAQE,SAAUjB,KAAKC,MAAMgB,SAAUZ,MAAOH,GAC5C,kBAAC,IAAD,CACEG,MAAOH,EACPgB,SAAU,CAAC,OAAD,iCAEZ,kBAAC,IAAD,MACCZ,EAAMa,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNf,EAAQe,EAAKC,YAAYhB,OAASe,EAAKE,OAAOC,KACpD,OACE,yBAAKC,IAAKJ,EAAKE,OAAOC,MACpB,wBACEE,MAAO,CACLC,aAAcC,YAAO,OAGvB,kBAAC,OAAD,CAAMF,MAAO,CAAEG,UAAW,QAAUC,GAAIT,EAAKE,OAAOC,MACjDlB,IAGL,+BAAQe,EAAKC,YAAYS,MACzB,uBAAGC,wBAAyB,CAAEC,OAAQZ,EAAKa,eAIjD,wBACER,MAAO,CACLS,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,WAAY,SACZC,UAAW,OACXC,QAAS,KAGT3B,GACA,kBAAC,OAAD,CAAMiB,GAAE,UAAYf,EAAY0B,IAAI,QAApC,mBAIDC,MAAMC,KAAK,CAAEC,OAAQhC,IAAY,SAACiC,EAAGC,GAAJ,OAChC,wBACErB,IAAG,qBAAsBqB,EAAI,GAC7BpB,MAAO,CACLqB,OAAQ,IAGV,kBAAC,OAAD,CACEjB,GAAE,WAAkB,IAANgB,EAAU,IAAMA,EAAI,GAClCpB,MAAO,CACLc,QAASZ,YAAO,KAChBoB,eAAgB,OAChBC,MAAOH,EAAI,IAAMnC,EAAc,UAAY,GAC3CuC,WAAYJ,EAAI,IAAMnC,EAAc,UAAY,KAGjDmC,EAAI,QAIThC,GACA,kBAAC,OAAD,CAAMgB,GAAE,UAAYb,EAAYwB,IAAI,QAApC,kB,GAxEYU,IAAMC,WAkFftD,YAER,IAAMuD,EAAS","file":"component---src-templates-blog-list-js-00192fab07158ee45500.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport SEO from '../components/seo'\nimport Bio from '../components/Bio'\nimport Layout from '../components/Layout'\nimport { rhythm } from '../utils/typography'\n\nclass BlogIndex extends React.Component {\n  render() {\n    const { data } = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n    const { currentPage, numPages } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? '/1' : (currentPage - 1).toString()\n    const nextPage = (currentPage + 1).toString()\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title={siteTitle}\n          keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n        />\n        <Bio />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <div key={node.fields.slug}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: 'none' }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n              <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n            </div>\n          )\n        })}\n        <ul\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            listStyle: 'none',\n            padding: 0,\n          }}\n        >\n          {!isFirst && (\n            <Link to={`/blogs/${prevPage}`} rel=\"prev\">\n              ← Previous Page\n            </Link>\n          )}\n          {Array.from({ length: numPages }, (_, i) => (\n            <li\n              key={`pagination-number${i + 1}`}\n              style={{\n                margin: 0,\n              }}\n            >\n              <Link\n                to={`/blogs/${i === 0 ? '1' : i + 1}`}\n                style={{\n                  padding: rhythm(1 / 4),\n                  textDecoration: 'none',\n                  color: i + 1 === currentPage ? '#ffffff' : '',\n                  background: i + 1 === currentPage ? '#007acc' : '',\n                }}\n              >\n                {i + 1}\n              </Link>\n            </li>\n          ))}\n          {!isLast && (\n            <Link to={`/blogs/${nextPage}`} rel=\"next\">\n              Next Page →\n            </Link>\n          )}\n        </ul>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD MMMM, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}